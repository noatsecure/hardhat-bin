#!/usr/bin/env python3
from os.path import abspath,basename,expanduser,exists
from selinux import lgetfilecon
from subprocess import run
from sys import argv,exit

################
### BINARIES ###
################
seinfo = expanduser('/usr/bin/seinfo')

#############
### USAGE ###
#############
def usage():
    name = basename(argv[0])
    print(f"NAME\n\t{name} - python script that obtains the `seinfo` extended description for the specified file/directory\n")
    print(f"SYNOPSIS\n\t{name} /path/to/file_or_dir [OPTIONS]\n")
    print(f"DESCRIPTION\n\t{name} is a Python script provided by the HardHat project that uses the `seinfo` program to obtain the extended description of the specified file or directory. By default, the extended descriptions for the user, role, and type contexts are all returned, but the options below allow you to specify the desired contexts only.\n")
    print(f"OPTIONS\n\t-u\tObtain the description for the SELinux user context\n\t-r\tObtain the description for the SELinux role context\n\t-t\tObtain the description for the SELinux type context\n")
    print(f"EXAMPLE\n\t1. {name} /usr/bin/cat -u\n\n\t2. {name} /usr/bin/cat -r\n\n\t3. {name} /usr/bin/cat -t\n\n\t4. {name} /usr/bin/cat -u -r -t\n\t\tOR\n\t   {name} /usr/bin/cat\n")
    print("\n")

#################
### FUNCTIONS ###
#################
def args():
    # Check if the user has specified the help flag (any argument)
    if any([True for arg in argv if arg == '-h']):
        # If so, then display the usage information
        usage()
        # Exit
        exit(0)
    try:
        # Argument 1: Full path to the target whose attributes will be obtained
        target = abspath(expanduser(argv[1]))
    except IndexError:
        # Display the usage information
        usage()
        # If the argument was not specified, then display an error message to user
        print('ERROR: Argument 1: Full path to the target')
        # Exit with an error
        exit(1)
    # Check if the specified flag was passed by user. If so, then return True, meaning that the user/role/type will be obtained 
    get_user = options('-u')
    get_role = options('-r')
    get_type = options('-t')
    # If all options are False, then set them to true since the default behavior is to obtain all
    if (get_user is False) and (get_role is False) and (get_type is False):
        get_user = True
        get_role = True
        get_type = True
    # Return the arguments
    return(target, get_user, get_role, get_type)

def options(flag):
    # If the $flag matches one of the specified arguments passed by user, then return True
    if any([True for arg in argv if arg.strip() == flag]): return(True)
    # Otherwise, return False
    return(False)

def contexts(target):
    try:
        # Obtain the SELinux contexts for $target, which will provide the user, role, and type for $target as the last entry in the output list
        contexts = lgetfilecon(target)[-1]
    except FileNotFoundError:
        # If $target is not a valid file or directory, then display an error message to user
        raise FileNotFoundError(f"ERROR: Unable to locate the specified file or directory: '{target}'")
    # Split the contexts and clean each entry by removing extraneous whitespace
    contexts = [entry.strip() for entry in contexts.split(':') if entry]
    # Define the three entries in $contexts
    seuser = contexts[0]
    serole = contexts[1]
    setype = contexts[2]
    # Return each variable
    return(seuser, serole, setype)

def description(context, get_context):
    # If $get_context was not specified, then return Nonetype
    if get_context is False: return(None)
    try:
        # Split $context by the very last underscore in order to obtain the context; eg. 'u' for user, 'r' for role, and 't' for type
        context_flag = context.rsplit('_', 1)[1].strip()
    except IndexError:
        # If $context could not be split, then display an error message to user
        print(f"ERROR: Unable to split the following via the underscore delimiter to obtain the context: '{context}'")
        # Exit with an error
        exit(1)
    # Use `seinfo` to obtain the decription for $context_type
    # '--flat' = Exclude headers and other identifiers; makes it easier for scripts
    # '-x' = Show the description for the $context_type
    # '-u/-r/-t' = Specify that a user/role/type is being queried
    cmd = run([seinfo, '--flat', '-x', f"-{context_flag}", context], capture_output = True) 
    # Check if the $cmd successfully executed
    if cmd.returncode != 0:
        # If not, then display an error message to user
        print(f"ERROR: The `seinfo` command failed to execute:\n\n\t{cmd}")
        # Exit with an error
        exit(1)
    # Decode the output from the $cmd and remove all extraneous whitespaces
    stdout = cmd.stdout.decode().strip()
    # Obtain the description minus the first word, which simply states whether $context is a 'user', 'role' or 'type'
    desc = stdout.split(' ')[1:]
    # Return the list containing the description for the $context
    return(desc)

def ignore_alias(setype_desc):
    try:
        # Obtain the list index of the specified string within $setype_desc
        i = setype_desc.index('alias')
    except ValueError:
        # If there are no aliases, then return $setype_desc as-is
        return(setype_desc)
    # The start will the the index before the position of 'alias'
    start = i - 1
    try:
        # Define the end of the aliases by the curly brace
        end = setype_desc.index('},')
    except ValueError:
        # If the end curly brace could not be found, then only the next index is associated with the alias
        end = i + 1
    # Remove all entries from the $start to the $end inclusively
    del setype_desc[start:end + 1]
    # Return the new $setype_desc list
    return(setype_desc)

def stdout(desc):
    try:
        # Join the $desc list and display to user
        print(' '.join(desc).strip())
    except TypeError:
        # If $desc is Nonetype, then display it as-is
        print(desc)

############
### MAIN ###
############
def main(target, get_user = True, get_role = True, get_type = True):
    # Obtain the SELinux contexts for $target, which includes the user, role and type
    [seuser, serole, setype] = contexts(target)
    # Obtain the description for $seuser
    seuser_desc = description(seuser, get_user)
    # Obtain the description for $serole
    serole_desc = description(serole, get_role)
    # Obtain the description for $setype
    setype_desc = description(setype, get_type)
    # Aliases are not needed within $setype_desc, so remove them
    setype_desc = ignore_alias(setype_desc)
    # Return the decriptions for all contexts
    return(seuser_desc, serole_desc, setype_desc)

#############
### START ###
#############
if __name__ == '__main__':
    # Obtain the user-specified arguments
    [target, get_user, get_role, get_type] = args()
    # Start the main function and obtain the extended descriptions for the user, role, and type contexts of $target
    [seuser_desc, serole_desc, setype_desc] = main(target, get_user, get_role, get_type)
    # Display the extended descriptions to stdout
    stdout(seuser_desc)
    stdout(serole_desc)
    stdout(setype_desc)
